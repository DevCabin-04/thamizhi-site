---
export interface Props {
  size?: 'sm' | 'md' | 'lg' | 'xl';
  color?: 'primary' | 'secondary' | 'white' | 'gray';
  message?: string;
  center?: boolean;
}

const {
  size = 'md',
  color = 'primary',
  message,
  center = false
} = Astro.props;

const sizeClasses = {
  sm: 'w-4 h-4',
  md: 'w-8 h-8',
  lg: 'w-12 h-12',
  xl: 'w-16 h-16'
};

const colorClasses = {
  primary: 'text-orange-600',
  secondary: 'text-red-600',
  white: 'text-white',
  gray: 'text-gray-600'
};

const containerClasses = center ? 'flex items-center justify-center' : '';
---

<div class={`loading-spinner ${containerClasses}`}>
  <div class="flex flex-col items-center gap-3">
    <div class={`animate-spin ${sizeClasses[size]} ${colorClasses[color]}`}>
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
        />
      </svg>
    </div>

    {message && (
      <p class={`text-sm ${colorClasses[color]} animate-pulse`}>
        {message}
      </p>
    )}
  </div>
</div>

<style>
  .loading-spinner {
    min-height: 2rem;
  }

  @media (prefers-reduced-motion: reduce) {
    .animate-spin,
    .animate-pulse {
      animation: none;
    }
  }
</style>

---
import {
    getLangFromUrl,
    languages,
    getBasePath,
    getUrlWithBase,
    // type SupportedLangs,
} from "../../utils/i18n";
import { getRelativeLocaleUrl } from 'astro:i18n';

// export interface Props {
//     currentLang: SupportedLang;
// }

const { currentLang } = Astro.props;

// Helper function to get clean page path without language or base path
const getPagePath = (url: URL) => {
    let pathname = url.pathname;
    const basePath = getBasePath();
    
    // Remove base path if it exists (for production)
    if (basePath && pathname.startsWith(basePath)) {
        pathname = pathname.substring(basePath.length);
    }
    
    // Ensure pathname starts with /
    if (!pathname.startsWith('/')) {
        pathname = '/' + pathname;
    }
    
    // Remove trailing slash if present
    if (pathname.endsWith('/') && pathname !== '/') {
        pathname = pathname.slice(0, -1);
    }
    
    // Split path and filter empty parts
    const pathParts = pathname.split('/').filter(part => part);
    
    // Check if first part is a language code and remove it
    if (pathParts.length > 0 && Object.keys(languages).includes(pathParts[0])) {
        pathParts.shift(); // Remove language code
    }
    
    // Return the clean path (empty string for home page, /path for other pages)
    return pathParts.length > 0 ? `/${pathParts.join('/')}` : '';
};
---

<div class="relative inline-block text-left">
    <div>
        <button 
            type="button" 
            class="inline-flex items-center justify-center w-full px-3 py-1.5 text-xs font-medium text-white bg-white bg-opacity-10 rounded hover:bg-opacity-20 focus:outline-none focus:ring-1 focus:ring-white focus:ring-opacity-30 transition-all" 
            id="language-menu-button" 
            aria-expanded="false" 
            aria-haspopup="true"
        >
            <span class="mr-1">{languages[currentLang].flag}</span>
            {languages[currentLang].name}
            <svg class="-mr-1 ml-1 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
        </button>
    </div>

    <div 
        class="hidden origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10" 
        role="menu" 
        aria-orientation="vertical" 
        aria-labelledby="language-menu-button" 
        tabindex="-1"
        id="language-menu"
    >
        <div class="py-1" role="none">
            {Object.entries(languages).map(([langCode, langInfo]) => {
                const pagePath = getPagePath(Astro.url);
                const newUrl = getUrlWithBase(pagePath, langCode);
                
                return (
                    <a
                        href={newUrl}
                        class={`flex items-center px-4 py-2 text-sm ${currentLang === langCode ? 'bg-orange-50 text-orange-600 font-medium' : 'text-gray-700 hover:bg-orange-50 hover:text-orange-600'}`}
                        role="menuitem"
                        tabindex="-1"
                    >
                        <span class="mr-2">{langInfo.flag}</span>
                        {langInfo.name}
                    </a>
                );
            })}
        </div>
    </div>
</div>

<script>
    // Toggle dropdown menu
    document.addEventListener('DOMContentLoaded', () => {
        const button = document.getElementById('language-menu-button');
        const menu = document.getElementById('language-menu');

        if (button && menu) {
            // Toggle menu when button is clicked
            button.addEventListener('click', () => {
                menu.classList.toggle('hidden');
                button.setAttribute('aria-expanded', menu.classList.contains('hidden') ? 'false' : 'true');
            });

            // Close menu when clicking outside
            document.addEventListener('click', (event) => {
                if (!button.contains(event.target as Node) && !menu.contains(event.target as Node)) {
                    menu.classList.add('hidden');
                    button.setAttribute('aria-expanded', 'false');
                }
            });

            // Close menu when pressing escape key
            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape') {
                    menu.classList.add('hidden');
                    button.setAttribute('aria-expanded', 'false');
                }
            });
        }
    });
</script>
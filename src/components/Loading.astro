---
export interface Props {
  message?: string;
  size?: 'small' | 'medium' | 'large';
  type?: 'spinner' | 'dots' | 'pulse';
}

const {
  message = "Loading...",
  size = "medium",
  type = "spinner"
} = Astro.props;

const sizeClasses = {
  small: "w-4 h-4",
  medium: "w-8 h-8",
  large: "w-12 h-12"
};

const containerClasses = {
  small: "p-2",
  medium: "p-4",
  large: "p-6"
};
---

<div class={`loading-container flex flex-col items-center justify-center ${containerClasses[size]}`}>
  {type === 'spinner' && (
    <div class={`animate-spin rounded-full border-2 border-orange-200 border-t-orange-600 ${sizeClasses[size]}`}></div>
  )}

  {type === 'dots' && (
    <div class="flex space-x-1">
      <div class={`bg-orange-600 rounded-full animate-pulse ${size === 'small' ? 'w-2 h-2' : size === 'large' ? 'w-4 h-4' : 'w-3 h-3'}`} style="animation-delay: 0ms;"></div>
      <div class={`bg-orange-600 rounded-full animate-pulse ${size === 'small' ? 'w-2 h-2' : size === 'large' ? 'w-4 h-4' : 'w-3 h-3'}`} style="animation-delay: 150ms;"></div>
      <div class={`bg-orange-600 rounded-full animate-pulse ${size === 'small' ? 'w-2 h-2' : size === 'large' ? 'w-4 h-4' : 'w-3 h-3'}`} style="animation-delay: 300ms;"></div>
    </div>
  )}

  {type === 'pulse' && (
    <div class={`bg-orange-200 rounded-lg animate-pulse ${sizeClasses[size]}`}></div>
  )}

  {message && (
    <p class={`text-gray-600 mt-3 text-center ${size === 'small' ? 'text-sm' : size === 'large' ? 'text-lg' : 'text-base'}`}>
      {message}
    </p>
  )}
</div>

<style>
  .loading-container {
    min-height: 60px;
  }

  @keyframes pulse-custom {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.3;
    }
  }

  .animate-pulse-custom {
    animation: pulse-custom 1.5s ease-in-out infinite;
  }
</style>

---
export interface Props {
  fallbackMessage?: string;
  showDetails?: boolean;
}

const { fallbackMessage = "Something went wrong", showDetails = false } = Astro.props;

// This component provides a wrapper for error handling
// In Astro, error boundaries are handled differently than React
// This is more of a fallback display component
---

<div class="error-boundary">
  <div class="bg-red-50 border border-red-200 rounded-lg p-6 max-w-2xl mx-auto">
    <div class="flex items-center mb-4">
      <svg
        class="w-6 h-6 text-red-600 mr-3"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
        />
      </svg>
      <h3 class="text-lg font-semibold text-red-800">
        Error Loading Content
      </h3>
    </div>

    <p class="text-red-700 mb-4">
      {fallbackMessage}
    </p>

    {showDetails && (
      <details class="mt-4">
        <summary class="cursor-pointer text-sm text-red-600 hover:text-red-800">
          Technical Details
        </summary>
        <div class="mt-2 p-3 bg-red-100 rounded text-sm text-red-800 font-mono">
          <slot name="error-details" />
        </div>
      </details>
    )}

    <div class="mt-6 flex flex-col sm:flex-row gap-3">
      <button
        onclick="window.location.reload()"
        class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
      >
        Try Again
      </button>
      <a
        href="/"
        class="border border-red-300 text-red-700 px-4 py-2 rounded-lg hover:bg-red-50 transition-colors text-center"
      >
        Go Home
      </a>
    </div>
  </div>
</div>

<style>
  .error-boundary {
    min-height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }
</style>
